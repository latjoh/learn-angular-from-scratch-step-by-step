{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Http } from '@angular/http';\nimport { SDKModels } from './SDKModels';\nimport { BaseLoopBackApi } from '../core/base.service';\nimport { LoopBackConfig } from '../../lb.config';\nimport { LoopBackAuth } from '../core/auth.service';\nimport { LoopBackFilter, AccessToken } from '../../models/BaseModels';\nimport { JSONSearchParams } from '../core/search.params';\nimport { ErrorHandler } from '../core/error.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/http\";\nimport * as i2 from \"./SDKModels\";\nimport * as i3 from \"../core/auth.service\";\nimport * as i4 from \"../core/search.params\";\nimport * as i5 from \"../core/error.service\";\n/**\r\n * Api services for the `User` model.\r\n */\nvar UserApi = /** @class */function (_super) {\n  __extends(UserApi, _super);\n  function UserApi(http, models, auth, searchParams, errorHandler) {\n    var _this = _super.call(this, http, models, auth, searchParams, errorHandler) || this;\n    _this.http = http;\n    _this.models = models;\n    _this.auth = auth;\n    _this.searchParams = searchParams;\n    _this.errorHandler = errorHandler;\n    return _this;\n  }\n  /**\r\n   * Find a related item by id for accessTokens.\r\n   *\r\n   * @param {any} id User id\r\n   *\r\n   * @param {any} fk Foreign key for accessTokens\r\n   *\r\n   * @returns {object} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `User` object.)\r\n   * </em>\r\n   */\n  UserApi.prototype.findByIdAccessTokens = function (id, fk, customHeaders) {\n    var _method = \"GET\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens/:fk\";\n    var _routeParams = {\n      id: id,\n      fk: fk\n    };\n    var _postBody = {};\n    var _urlParams = {};\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Delete a related item by id for accessTokens.\r\n   *\r\n   * @param {any} id User id\r\n   *\r\n   * @param {any} fk Foreign key for accessTokens\r\n   *\r\n   * @returns {object} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\n  UserApi.prototype.destroyByIdAccessTokens = function (id, fk, customHeaders) {\n    var _method = \"DELETE\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens/:fk\";\n    var _routeParams = {\n      id: id,\n      fk: fk\n    };\n    var _postBody = {};\n    var _urlParams = {};\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Update a related item by id for accessTokens.\r\n   *\r\n   * @param {any} id User id\r\n   *\r\n   * @param {any} fk Foreign key for accessTokens\r\n   *\r\n   * @param {object} data Request data.\r\n   *\r\n   * This method expects a subset of model properties as request parameters.\r\n   *\r\n   * @returns {object} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `User` object.)\r\n   * </em>\r\n   */\n  UserApi.prototype.updateByIdAccessTokens = function (id, fk, data, customHeaders) {\n    if (data === void 0) {\n      data = {};\n    }\n    var _method = \"PUT\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens/:fk\";\n    var _routeParams = {\n      id: id,\n      fk: fk\n    };\n    var _postBody = {\n      data: data\n    };\n    var _urlParams = {};\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Queries accessTokens of User.\r\n   *\r\n   * @param {any} id User id\r\n   *\r\n   * @param {object} filter\r\n   *\r\n   * @returns {object[]} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `User` object.)\r\n   * </em>\r\n   */\n  UserApi.prototype.getAccessTokens = function (id, filter, customHeaders) {\n    if (filter === void 0) {\n      filter = {};\n    }\n    var _method = \"GET\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens\";\n    var _routeParams = {\n      id: id\n    };\n    var _postBody = {};\n    var _urlParams = {};\n    if (typeof filter !== 'undefined' && filter !== null) _urlParams.filter = filter;\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Creates a new instance in accessTokens of this model.\r\n   *\r\n   * @param {any} id User id\r\n   *\r\n   * @param {object} data Request data.\r\n   *\r\n   * This method expects a subset of model properties as request parameters.\r\n   *\r\n   * @returns {object} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `User` object.)\r\n   * </em>\r\n   */\n  UserApi.prototype.createAccessTokens = function (id, data, customHeaders) {\n    if (data === void 0) {\n      data = {};\n    }\n    var _method = \"POST\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens\";\n    var _routeParams = {\n      id: id\n    };\n    var _postBody = {\n      data: data\n    };\n    var _urlParams = {};\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Deletes all accessTokens of this model.\r\n   *\r\n   * @param {any} id User id\r\n   *\r\n   * @returns {object} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\n  UserApi.prototype.deleteAccessTokens = function (id, customHeaders) {\n    var _method = \"DELETE\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens\";\n    var _routeParams = {\n      id: id\n    };\n    var _postBody = {};\n    var _urlParams = {};\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Counts accessTokens of User.\r\n   *\r\n   * @param {any} id User id\r\n   *\r\n   * @param {object} where Criteria to match model instances\r\n   *\r\n   * @returns {object} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * Data properties:\r\n   *\r\n   *  - `count` – `{number}` -\r\n   */\n  UserApi.prototype.countAccessTokens = function (id, where, customHeaders) {\n    if (where === void 0) {\n      where = {};\n    }\n    var _method = \"GET\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens/count\";\n    var _routeParams = {\n      id: id\n    };\n    var _postBody = {};\n    var _urlParams = {};\n    if (typeof where !== 'undefined' && where !== null) _urlParams.where = where;\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Patch an existing model instance or insert a new one into the data source.\r\n   *\r\n   * @param {object} data Request data.\r\n   *\r\n   *  - `data` – `{object}` - Model instance data\r\n   *\r\n   * @returns {object} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `User` object.)\r\n   * </em>\r\n   */\n  UserApi.prototype.patchOrCreate = function (data, customHeaders) {\n    if (data === void 0) {\n      data = {};\n    }\n    var _method = \"PATCH\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users\";\n    var _routeParams = {};\n    var _postBody = {\n      data: data\n    };\n    var _urlParams = {};\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Patch attributes for a model instance and persist it into the data source.\r\n   *\r\n   * @param {any} id User id\r\n   *\r\n   * @param {object} data Request data.\r\n   *\r\n   *  - `data` – `{object}` - An object of model property name/value pairs\r\n   *\r\n   * @returns {object} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `User` object.)\r\n   * </em>\r\n   */\n  UserApi.prototype.patchAttributes = function (id, data, customHeaders) {\n    if (data === void 0) {\n      data = {};\n    }\n    var _method = \"PATCH\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id\";\n    var _routeParams = {\n      id: id\n    };\n    var _postBody = {\n      data: data\n    };\n    var _urlParams = {};\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Login a user with username/email and password.\r\n   *\r\n   * @param {string} include Related objects to include in the response. See the description of return value for more details.\r\n   *   Default value: `user`.\r\n   *\r\n   *  - `rememberMe` - `boolean` - Whether the authentication credentials\r\n   *     should be remembered in localStorage across app/browser restarts.\r\n   *     Default: `true`.\r\n   *\r\n   * @param {object} data Request data.\r\n   *\r\n   * This method expects a subset of model properties as request parameters.\r\n   *\r\n   * @returns {object} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * The response body contains properties of the AccessToken created on login.\r\n   * Depending on the value of `include` parameter, the body may contain additional properties:\r\n   *\r\n   *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)\r\n   *\r\n   *\r\n   */\n  UserApi.prototype.login = function (credentials, include, rememberMe, customHeaders) {\n    var _this = this;\n    if (include === void 0) {\n      include = 'user';\n    }\n    if (rememberMe === void 0) {\n      rememberMe = true;\n    }\n    var _method = \"POST\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/login\";\n    var _routeParams = {};\n    var _postBody = {\n      credentials: credentials\n    };\n    var _urlParams = {};\n    if (typeof include !== 'undefined' && include !== null) _urlParams.include = include;\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders).map(function (response) {\n      response.ttl = parseInt(response.ttl);\n      response.rememberMe = rememberMe;\n      _this.auth.setToken(response);\n      return response;\n    });\n    return result;\n  };\n  /**\r\n   * Logout a user with access token.\r\n   *\r\n   * @param {object} data Request data.\r\n   *\r\n   * This method does not accept any data. Supply an empty object.\r\n   *\r\n   * @returns {object} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\n  UserApi.prototype.logout = function (customHeaders) {\n    var _method = \"POST\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/logout\";\n    var _routeParams = {};\n    var _postBody = {};\n    var _urlParams = {};\n    _urlParams.access_token = this.auth.getAccessTokenId();\n    this.auth.clear();\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Trigger user's identity verification with configured verifyOptions\r\n   *\r\n   * @param {any} id User id\r\n   *\r\n   * @param {object} data Request data.\r\n   *\r\n   * This method does not accept any data. Supply an empty object.\r\n   *\r\n   * @returns {object} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\n  UserApi.prototype.verify = function (id, customHeaders) {\n    var _method = \"POST\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/verify\";\n    var _routeParams = {\n      id: id\n    };\n    var _postBody = {};\n    var _urlParams = {};\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Confirm a user registration with identity verification token.\r\n   *\r\n   * @param {string} uid\r\n   *\r\n   * @param {string} token\r\n   *\r\n   * @param {string} redirect\r\n   *\r\n   * @returns {object} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\n  UserApi.prototype.confirm = function (uid, token, redirect, customHeaders) {\n    if (redirect === void 0) {\n      redirect = {};\n    }\n    var _method = \"GET\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/confirm\";\n    var _routeParams = {};\n    var _postBody = {};\n    var _urlParams = {};\n    if (typeof uid !== 'undefined' && uid !== null) _urlParams.uid = uid;\n    if (typeof token !== 'undefined' && token !== null) _urlParams.token = token;\n    if (typeof redirect !== 'undefined' && redirect !== null) _urlParams.redirect = redirect;\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Reset password for a user with email.\r\n   *\r\n   * @param {object} data Request data.\r\n   *\r\n   * This method expects a subset of model properties as request parameters.\r\n   *\r\n   * @returns {object} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\n  UserApi.prototype.resetPassword = function (options, customHeaders) {\n    var _method = \"POST\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/reset\";\n    var _routeParams = {};\n    var _postBody = {\n      options: options\n    };\n    var _urlParams = {};\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Change a user's password.\r\n   *\r\n   * @param {object} data Request data.\r\n   *\r\n   *  - `oldPassword` – `{string}` -\r\n   *\r\n   *  - `newPassword` – `{string}` -\r\n   *\r\n   * @returns {object} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\n  UserApi.prototype.changePassword = function (oldPassword, newPassword, customHeaders) {\n    var _method = \"POST\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/change-password\";\n    var _routeParams = {};\n    var _postBody = {\n      data: {\n        oldPassword: oldPassword,\n        newPassword: newPassword\n      }\n    };\n    var _urlParams = {};\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Reset user's password via a password-reset token.\r\n   *\r\n   * @param {object} data Request data.\r\n   *\r\n   *  - `newPassword` – `{string}` -\r\n   *\r\n   * @returns {object} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\n  UserApi.prototype.setPassword = function (newPassword, customHeaders) {\n    var _method = \"POST\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/reset-password\";\n    var _routeParams = {};\n    var _postBody = {\n      data: {\n        newPassword: newPassword\n      }\n    };\n    var _urlParams = {};\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Creates a new instance in accessTokens of this model.\r\n   *\r\n   * @param {any} id User id\r\n   *\r\n   * @param {object} data Request data.\r\n   *\r\n   * This method expects a subset of model properties as request parameters.\r\n   *\r\n   * @returns {object[]} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `User` object.)\r\n   * </em>\r\n   */\n  UserApi.prototype.createManyAccessTokens = function (id, data, customHeaders) {\n    if (data === void 0) {\n      data = [];\n    }\n    var _method = \"POST\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens\";\n    var _routeParams = {\n      id: id\n    };\n    var _postBody = {\n      data: data\n    };\n    var _urlParams = {};\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * @ngdoc method\r\n   * @name sdk.User#getCurrent\r\n   * @methodOf sdk.User\r\n   *\r\n   * @description\r\n   *\r\n   * Get data of the currently logged user. Fail with HTTP result 401\r\n   * when there is no user logged in.\r\n   *\r\n   * @returns object An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   */\n  UserApi.prototype.getCurrent = function (filter) {\n    if (filter === void 0) {\n      filter = {};\n    }\n    var _method = \"GET\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users\" + \"/:id\";\n    var id = this.auth.getCurrentUserId();\n    if (id == null) id = '__anonymous__';\n    var _routeParams = {\n      id: id\n    };\n    var _urlParams = {};\n    var _postBody = {};\n    if (filter) _urlParams.filter = filter;\n    return this.request(_method, _url, _routeParams, _urlParams, _postBody);\n  };\n  /**\r\n   * Get data of the currently logged user that was returned by the last\r\n   * call to {@link sdk.User#login} or\r\n   * {@link sdk.User#getCurrent}. Return null when there\r\n   * is no user logged in or the data of the current user were not fetched\r\n   * yet.\r\n   *\r\n   * @returns object An Account instance.\r\n   */\n  UserApi.prototype.getCachedCurrent = function () {\n    return this.auth.getCurrentUserData();\n  };\n  /**\r\n   * Get data of the currently logged access tokern that was returned by the last\r\n   * call to {@link sdk.User#login}\r\n   *\r\n   * @returns object An AccessToken instance.\r\n   */\n  UserApi.prototype.getCurrentToken = function () {\n    return this.auth.getToken();\n  };\n  /**\r\n   * @name sdk.User#isAuthenticated\r\n   *\r\n   * @returns {boolean} True if the current user is authenticated (logged in).\r\n   */\n  UserApi.prototype.isAuthenticated = function () {\n    return !(this.getCurrentId() === '' || this.getCurrentId() == null || this.getCurrentId() == 'null');\n  };\n  /**\r\n   * @name sdk.User#getCurrentId\r\n   *\r\n   * @returns object Id of the currently logged-in user or null.\r\n   */\n  UserApi.prototype.getCurrentId = function () {\n    return this.auth.getCurrentUserId();\n  };\n  /**\r\n   * The name of the model represented by this $resource,\r\n   * i.e. `User`.\r\n   */\n  UserApi.prototype.getModelName = function () {\n    return \"User\";\n  };\n  UserApi.ɵfac = function UserApi_Factory(t) {\n    return new (t || UserApi)(i0.ɵɵinject(Http), i0.ɵɵinject(SDKModels), i0.ɵɵinject(LoopBackAuth), i0.ɵɵinject(JSONSearchParams), i0.ɵɵinject(ErrorHandler, 8));\n  };\n  UserApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserApi,\n    factory: UserApi.ɵfac\n  });\n  return UserApi;\n}(BaseLoopBackApi);\nexport { UserApi };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}