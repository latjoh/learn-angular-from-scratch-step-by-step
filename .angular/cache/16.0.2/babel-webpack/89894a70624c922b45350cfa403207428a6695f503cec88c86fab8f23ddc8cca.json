{"ast":null,"code":"import _defineProperty from \"C:/Users/john.latulippe/lafs-web/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _a;\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { QuestionsService } from '../services/questions.service';\nimport { AnswersService } from '../services/answers.service';\nimport { MatDialog } from '@angular/material';\nimport { DeleteQuestionModalComponent } from './delete-question/delete-question-modal.component';\nimport { NewQuestionModalComponent } from './new-question/new-question-modal.component';\nlet CategoryQuestionsComponent = class CategoryQuestionsComponent {\n  constructor(route, questionsService, answersService, dialog) {\n    _defineProperty(this, \"route\", void 0);\n    _defineProperty(this, \"questionsService\", void 0);\n    _defineProperty(this, \"answersService\", void 0);\n    _defineProperty(this, \"dialog\", void 0);\n    _defineProperty(this, \"questions\", void 0);\n    _defineProperty(this, \"categoryTitle\", void 0);\n    _defineProperty(this, \"categorySlug\", void 0);\n    this.route = route;\n    this.questionsService = questionsService;\n    this.answersService = answersService;\n    this.dialog = dialog;\n  }\n  ngOnInit() {\n    this.route.data.subscribe(routeData => {\n      let data = routeData['data'];\n      if (data) {\n        this.questions = data.questions;\n        this.categoryTitle = data.category_title;\n        this.categorySlug = data.category_slug;\n      }\n    });\n  }\n  getQuestions() {\n    this.questionsService.getQuestionsByCategory(this.categorySlug).then(questions => this.questions = questions);\n  }\n  openNewQuestionModal(categorySlug) {\n    let dialogRef = this.dialog.open(NewQuestionModalComponent, {\n      data: {\n        categorySlug: categorySlug\n      }\n    });\n    dialogRef.afterClosed().subscribe(question => {\n      if (question) {\n        this.addQuestionToList(question);\n      }\n    });\n  }\n  delete(questionId) {\n    let dialogRef = this.dialog.open(DeleteQuestionModalComponent, {\n      data: {\n        questionId: questionId\n      }\n    });\n    dialogRef.afterClosed().subscribe(confirm => {\n      if (confirm) {\n        // refresh the questions list\n        var index = this.questions.findIndex(question => question.id === questionId);\n        this.questions.splice(index, 1);\n        // TODO: evaluar cambiar esto por un operation method en loopback.\n        this.answersService.getAnswers(questionId).then(answers => {\n          for (let answer of answers) {\n            this.answersService.deleteAnswer(answer.id);\n          }\n        });\n      }\n    });\n  }\n  addQuestionToList(question) {\n    this.questions.push(question);\n  }\n  addPositiveVote(question) {\n    question.positiveVotes += 1;\n    this.questionsService.updateQuestion(question);\n  }\n  addNegativeVote(question) {\n    question.negativeVotes += 1;\n    this.questionsService.updateQuestion(question);\n  }\n};\nCategoryQuestionsComponent = __decorate([Component({\n  selector: 'category-questions',\n  styleUrls: ['./category-questions.scss'],\n  templateUrl: './category-questions.component.html'\n}), __metadata(\"design:paramtypes\", [ActivatedRoute, QuestionsService, AnswersService, typeof (_a = typeof MatDialog !== \"undefined\" && MatDialog) === \"function\" ? _a : Object])], CategoryQuestionsComponent);\nexport { CategoryQuestionsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}