{"ast":null,"code":"import { Http, Headers, Request, RequestOptions } from '@angular/http';\nimport { JSONSearchParams } from './search.params';\nimport { ErrorHandler } from './error.service';\nimport { LoopBackAuth } from './auth.service';\nimport { LoopBackConfig } from '../../lb.config';\nimport { LoopBackFilter } from '../../models/BaseModels';\nimport { SDKModels } from '../custom/SDKModels';\nimport { Subject } from 'rxjs/Subject';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/map';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/http\";\nimport * as i2 from \"../custom/SDKModels\";\nimport * as i3 from \"./auth.service\";\nimport * as i4 from \"./search.params\";\nimport * as i5 from \"./error.service\";\n/**\r\n* @module BaseLoopBackApi\r\n* @author Jonathan Casarrubias <@johncasarrubias> <github:jonathan-casarrubias>\r\n* @author Nikolay Matiushenkov <https://github.com/mnvx>\r\n* @license MIT\r\n* @description\r\n* Abstract class that will be implemented in every custom service automatically built\r\n* by the sdk builder.\r\n* It provides the core functionallity for every API call, either by HTTP Calls or by\r\n* WebSockets.\r\n**/\nvar BaseLoopBackApi = /** @class */function () {\n  function BaseLoopBackApi(http, models, auth, searchParams, errorHandler) {\n    this.http = http;\n    this.models = models;\n    this.auth = auth;\n    this.searchParams = searchParams;\n    this.errorHandler = errorHandler;\n    this.model = this.models.get(this.getModelName());\n  }\n  /**\r\n   * @method request\r\n   * @param {string}  method      Request method (GET, POST, PUT)\r\n   * @param {string}  url         Request url (my-host/my-url/:id)\r\n   * @param {any}     routeParams Values of url parameters\r\n   * @param {any}     urlParams   Parameters for building url (filter and other)\r\n   * @param {any}     postBody    Request postBody\r\n   * @return {Observable<any>}\r\n   * @description\r\n   * This is a core method, every HTTP Call will be done from here, every API Service will\r\n   * extend this class and use this method to get RESTful communication.\r\n   **/\n  BaseLoopBackApi.prototype.request = function (method, url, routeParams, urlParams, postBody, pubsub, customHeaders) {\n    var _this = this;\n    if (routeParams === void 0) {\n      routeParams = {};\n    }\n    if (urlParams === void 0) {\n      urlParams = {};\n    }\n    if (postBody === void 0) {\n      postBody = {};\n    }\n    if (pubsub === void 0) {\n      pubsub = false;\n    }\n    // Transpile route variables to the actual request Values\n    Object.keys(routeParams).forEach(function (key) {\n      url = url.replace(new RegExp(\":\" + key + \"(\\/|$)\", \"g\"), routeParams[key] + \"$1\");\n    });\n    if (pubsub) {\n      console.info('SDK: PubSub functionality is disabled, generate SDK using -io enabled');\n    } else {\n      // Headers to be sent\n      var headers = new Headers();\n      headers.append('Content-Type', 'application/json');\n      // Authenticate request\n      this.authenticate(url, headers);\n      // Body fix for built in remote methods using \"data\", \"options\" or \"credentials\n      // that are the actual body, Custom remote method properties are different and need\n      // to be wrapped into a body object\n      var body = void 0;\n      var postBodyKeys = typeof postBody === 'object' ? Object.keys(postBody) : [];\n      if (postBodyKeys.length === 1) {\n        body = postBody[postBodyKeys.shift()];\n      } else {\n        body = postBody;\n      }\n      var filter = '';\n      // Separate filter object from url params and add to search query\n      if (urlParams.filter) {\n        if (LoopBackConfig.isHeadersFilteringSet()) {\n          headers.append('filter', JSON.stringify(urlParams.filter));\n        } else {\n          filter = \"?filter=\".concat(encodeURIComponent(JSON.stringify(urlParams.filter)));\n        }\n        delete urlParams.filter;\n      }\n      // Separate where object from url params and add to search query\n      /**\r\n      CODE BELOW WILL GENERATE THE FOLLOWING ISSUES:\r\n      - https://github.com/mean-expert-official/loopback-sdk-builder/issues/356\r\n      - https://github.com/mean-expert-official/loopback-sdk-builder/issues/328\r\n      if (urlParams.where) {\r\n        headers.append('where', JSON.stringify(urlParams.where));\r\n        delete urlParams.where;\r\n      }\r\n      **/\n      if (typeof customHeaders === 'function') {\n        headers = customHeaders(headers);\n      }\n      this.searchParams.setJSON(urlParams);\n      var request = new Request(new RequestOptions({\n        headers: headers,\n        method: method,\n        url: \"\".concat(url).concat(filter),\n        search: Object.keys(urlParams).length > 0 ? this.searchParams.getURLSearchParams() : null,\n        body: body ? JSON.stringify(body) : undefined,\n        withCredentials: LoopBackConfig.getRequestOptionsCredentials()\n      }));\n      return this.http.request(request).map(function (res) {\n        return res.text() != \"\" ? res.json() : {};\n      }).catch(function (e) {\n        return _this.errorHandler.handleError(e);\n      });\n    }\n  };\n  /**\r\n   * @method authenticate\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @param {string} url Server URL\r\n   * @param {Headers} headers HTTP Headers\r\n   * @return {void}\r\n   * @description\r\n   * This method will try to authenticate using either an access_token or basic http auth\r\n   */\n  BaseLoopBackApi.prototype.authenticate = function (url, headers) {\n    if (this.auth.getAccessTokenId()) {\n      headers.append('Authorization', LoopBackConfig.getAuthPrefix() + this.auth.getAccessTokenId());\n    }\n  };\n  /**\r\n   * @method create\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @param {T} data Generic data type\r\n   * @return {Observable<T>}\r\n   * @description\r\n   * Generic create method\r\n   */\n  BaseLoopBackApi.prototype.create = function (data, customHeaders) {\n    var _this = this;\n    return this.request('POST', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path].join('/'), undefined, undefined, {\n      data: data\n    }, null, customHeaders).map(function (data) {\n      return _this.model.factory(data);\n    });\n  };\n  /**\r\n   * @method createMany\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @param {T[]} data Generic data type array\r\n   * @return {Observable<T[]>}\r\n   * @description\r\n   * Generic create many method\r\n   */\n  BaseLoopBackApi.prototype.createMany = function (data, customHeaders) {\n    var _this = this;\n    return this.request('POST', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path].join('/'), undefined, undefined, {\n      data: data\n    }, null, customHeaders).map(function (datum) {\n      return datum.map(function (data) {\n        return _this.model.factory(data);\n      });\n    });\n  };\n  /**\r\n   * @method findById\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @param {any} data Generic data type\r\n   * @return {Observable<T>}\r\n   * @description\r\n   * Generic findById method\r\n   */\n  BaseLoopBackApi.prototype.findById = function (id, filter, customHeaders) {\n    var _this = this;\n    if (filter === void 0) {\n      filter = {};\n    }\n    var _urlParams = {};\n    if (filter) _urlParams.filter = filter;\n    return this.request('GET', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, ':id'].join('/'), {\n      id: id\n    }, _urlParams, undefined, null, customHeaders).map(function (data) {\n      return _this.model.factory(data);\n    });\n  };\n  /**\r\n   * @method find\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return {Observable<T[+>}\r\n   * @description\r\n   * Generic find method\r\n   */\n  BaseLoopBackApi.prototype.find = function (filter, customHeaders) {\n    var _this = this;\n    if (filter === void 0) {\n      filter = {};\n    }\n    return this.request('GET', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path].join('/'), undefined, {\n      filter: filter\n    }, undefined, null, customHeaders).map(function (datum) {\n      return datum.map(function (data) {\n        return _this.model.factory(data);\n      });\n    });\n  };\n  /**\r\n   * @method exists\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return {Observable<T[]>}\r\n   * @description\r\n   * Generic exists method\r\n   */\n  BaseLoopBackApi.prototype.exists = function (id, customHeaders) {\n    return this.request('GET', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, ':id/exists'].join('/'), {\n      id: id\n    }, undefined, undefined, null, customHeaders);\n  };\n  /**\r\n   * @method findOne\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return {Observable<T>}\r\n   * @description\r\n   * Generic findOne method\r\n   */\n  BaseLoopBackApi.prototype.findOne = function (filter, customHeaders) {\n    var _this = this;\n    if (filter === void 0) {\n      filter = {};\n    }\n    return this.request('GET', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, 'findOne'].join('/'), undefined, {\n      filter: filter\n    }, undefined, null, customHeaders).map(function (data) {\n      return _this.model.factory(data);\n    });\n  };\n  /**\r\n   * @method updateAll\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return {Observable<T[]>}\r\n   * @description\r\n   * Generic updateAll method\r\n   */\n  BaseLoopBackApi.prototype.updateAll = function (where, data, customHeaders) {\n    if (where === void 0) {\n      where = {};\n    }\n    var _urlParams = {};\n    if (where) _urlParams.where = where;\n    return this.request('POST', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, 'update'].join('/'), undefined, _urlParams, {\n      data: data\n    }, null, customHeaders);\n  };\n  /**\r\n   * @method deleteById\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return {Observable<T>}\r\n   * @description\r\n   * Generic deleteById method\r\n   */\n  BaseLoopBackApi.prototype.deleteById = function (id, customHeaders) {\n    var _this = this;\n    return this.request('DELETE', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, ':id'].join('/'), {\n      id: id\n    }, undefined, undefined, null, customHeaders).map(function (data) {\n      return _this.model.factory(data);\n    });\n  };\n  /**\r\n   * @method count\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return {Observable<{ count: number }>}\r\n   * @description\r\n   * Generic count method\r\n   */\n  BaseLoopBackApi.prototype.count = function (where, customHeaders) {\n    if (where === void 0) {\n      where = {};\n    }\n    var _urlParams = {};\n    if (where) _urlParams.where = where;\n    return this.request('GET', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, 'count'].join('/'), undefined, _urlParams, undefined, null, customHeaders);\n  };\n  /**\r\n   * @method updateAttributes\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return {Observable<T>}\r\n   * @description\r\n   * Generic updateAttributes method\r\n   */\n  BaseLoopBackApi.prototype.updateAttributes = function (id, data, customHeaders) {\n    var _this = this;\n    return this.request('PUT', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, ':id'].join('/'), {\n      id: id\n    }, undefined, {\n      data: data\n    }, null, customHeaders).map(function (data) {\n      return _this.model.factory(data);\n    });\n  };\n  /**\r\n   * @method upsert\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return {Observable<T>}\r\n   * @description\r\n   * Generic upsert method\r\n   */\n  BaseLoopBackApi.prototype.upsert = function (data, customHeaders) {\n    var _this = this;\n    if (data === void 0) {\n      data = {};\n    }\n    return this.request('PUT', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path].join('/'), undefined, undefined, {\n      data: data\n    }, null, customHeaders).map(function (data) {\n      return _this.model.factory(data);\n    });\n  };\n  /**\r\n   * @method upsertPatch\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return {Observable<T>}\r\n   * @description\r\n   * Generic upsert method using patch http method\r\n   */\n  BaseLoopBackApi.prototype.upsertPatch = function (data, customHeaders) {\n    var _this = this;\n    if (data === void 0) {\n      data = {};\n    }\n    return this.request('PATCH', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path].join('/'), undefined, undefined, {\n      data: data\n    }, null, customHeaders).map(function (data) {\n      return _this.model.factory(data);\n    });\n  };\n  /**\r\n   * @method upsertWithWhere\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return {Observable<T>}\r\n   * @description\r\n   * Generic upsertWithWhere method\r\n   */\n  BaseLoopBackApi.prototype.upsertWithWhere = function (where, data, customHeaders) {\n    var _this = this;\n    if (where === void 0) {\n      where = {};\n    }\n    if (data === void 0) {\n      data = {};\n    }\n    var _urlParams = {};\n    if (where) _urlParams.where = where;\n    return this.request('POST', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, 'upsertWithWhere'].join('/'), undefined, _urlParams, {\n      data: data\n    }, null, customHeaders).map(function (data) {\n      return _this.model.factory(data);\n    });\n  };\n  /**\r\n   * @method replaceOrCreate\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return {Observable<T>}\r\n   * @description\r\n   * Generic replaceOrCreate method\r\n   */\n  BaseLoopBackApi.prototype.replaceOrCreate = function (data, customHeaders) {\n    var _this = this;\n    if (data === void 0) {\n      data = {};\n    }\n    return this.request('POST', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, 'replaceOrCreate'].join('/'), undefined, undefined, {\n      data: data\n    }, null, customHeaders).map(function (data) {\n      return _this.model.factory(data);\n    });\n  };\n  /**\r\n   * @method replaceById\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return {Observable<T>}\r\n   * @description\r\n   * Generic replaceById method\r\n   */\n  BaseLoopBackApi.prototype.replaceById = function (id, data, customHeaders) {\n    var _this = this;\n    if (data === void 0) {\n      data = {};\n    }\n    return this.request('POST', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, ':id', 'replace'].join('/'), {\n      id: id\n    }, undefined, {\n      data: data\n    }, null, customHeaders).map(function (data) {\n      return _this.model.factory(data);\n    });\n  };\n  /**\r\n   * @method createChangeStream\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return {Observable<any>}\r\n   * @description\r\n   * Generic createChangeStream method\r\n   */\n  BaseLoopBackApi.prototype.createChangeStream = function () {\n    var subject = new Subject();\n    if (typeof EventSource !== 'undefined') {\n      var emit = function (msg) {\n        return subject.next(JSON.parse(msg.data));\n      };\n      var source = new EventSource([LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, 'change-stream'].join('/'));\n      source.addEventListener('data', emit);\n      source.onerror = emit;\n    } else {\n      console.warn('SDK Builder: EventSource is not supported');\n    }\n    return subject.asObservable();\n  };\n  BaseLoopBackApi.ɵfac = function BaseLoopBackApi_Factory(t) {\n    return new (t || BaseLoopBackApi)(i0.ɵɵinject(Http), i0.ɵɵinject(SDKModels), i0.ɵɵinject(LoopBackAuth), i0.ɵɵinject(JSONSearchParams), i0.ɵɵinject(ErrorHandler, 8));\n  };\n  BaseLoopBackApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BaseLoopBackApi,\n    factory: BaseLoopBackApi.ɵfac\n  });\n  return BaseLoopBackApi;\n}();\nexport { BaseLoopBackApi };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}