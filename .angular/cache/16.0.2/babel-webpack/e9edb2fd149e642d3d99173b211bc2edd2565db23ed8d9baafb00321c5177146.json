{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { QuestionsService } from '../services/questions.service';\nimport { AnswersService } from '../services/answers.service';\nimport { MatDialog } from '@angular/material';\nimport { DeleteQuestionModalComponent } from './delete-question/delete-question-modal.component';\nimport { NewQuestionModalComponent } from './new-question/new-question-modal.component';\nvar CategoryQuestionsComponent = /** @class */function () {\n  function CategoryQuestionsComponent(route, questionsService, answersService, dialog) {\n    this.route = route;\n    this.questionsService = questionsService;\n    this.answersService = answersService;\n    this.dialog = dialog;\n  }\n  CategoryQuestionsComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.route.data.subscribe(function (routeData) {\n      var data = routeData['data'];\n      if (data) {\n        _this.questions = data.questions;\n        _this.categoryTitle = data.category_title;\n        _this.categorySlug = data.category_slug;\n      }\n    });\n  };\n  CategoryQuestionsComponent.prototype.getQuestions = function () {\n    var _this = this;\n    this.questionsService.getQuestionsByCategory(this.categorySlug).then(function (questions) {\n      return _this.questions = questions;\n    });\n  };\n  CategoryQuestionsComponent.prototype.openNewQuestionModal = function (categorySlug) {\n    var _this = this;\n    var dialogRef = this.dialog.open(NewQuestionModalComponent, {\n      data: {\n        categorySlug: categorySlug\n      }\n    });\n    dialogRef.afterClosed().subscribe(function (question) {\n      if (question) {\n        _this.addQuestionToList(question);\n      }\n    });\n  };\n  CategoryQuestionsComponent.prototype.delete = function (questionId) {\n    var _this = this;\n    var dialogRef = this.dialog.open(DeleteQuestionModalComponent, {\n      data: {\n        questionId: questionId\n      }\n    });\n    dialogRef.afterClosed().subscribe(function (confirm) {\n      if (confirm) {\n        // refresh the questions list\n        var index = _this.questions.findIndex(function (question) {\n          return question.id === questionId;\n        });\n        _this.questions.splice(index, 1);\n        // TODO: evaluar cambiar esto por un operation method en loopback.\n        _this.answersService.getAnswers(questionId).then(function (answers) {\n          for (var _i = 0, answers_1 = answers; _i < answers_1.length; _i++) {\n            var answer = answers_1[_i];\n            _this.answersService.deleteAnswer(answer.id);\n          }\n        });\n      }\n    });\n  };\n  CategoryQuestionsComponent.prototype.addQuestionToList = function (question) {\n    this.questions.push(question);\n  };\n  CategoryQuestionsComponent.prototype.addPositiveVote = function (question) {\n    question.positiveVotes += 1;\n    this.questionsService.updateQuestion(question);\n  };\n  CategoryQuestionsComponent.prototype.addNegativeVote = function (question) {\n    question.negativeVotes += 1;\n    this.questionsService.updateQuestion(question);\n  };\n  var _a;\n  CategoryQuestionsComponent = __decorate([Component({\n    selector: 'category-questions',\n    styleUrls: ['./category-questions.scss'],\n    templateUrl: './category-questions.component.html'\n  }), __metadata(\"design:paramtypes\", [ActivatedRoute, QuestionsService, AnswersService, typeof (_a = typeof MatDialog !== \"undefined\" && MatDialog) === \"function\" ? _a : Object])], CategoryQuestionsComponent);\n  return CategoryQuestionsComponent;\n}();\nexport { CategoryQuestionsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}