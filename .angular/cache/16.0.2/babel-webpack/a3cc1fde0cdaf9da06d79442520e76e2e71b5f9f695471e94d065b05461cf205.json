{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Http } from '@angular/http';\nimport { SDKModels } from './SDKModels';\nimport { BaseLoopBackApi } from '../core/base.service';\nimport { LoopBackConfig } from '../../lb.config';\nimport { LoopBackAuth } from '../core/auth.service';\nimport { JSONSearchParams } from '../core/search.params';\nimport { ErrorHandler } from '../core/error.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/http\";\nimport * as i2 from \"./SDKModels\";\nimport * as i3 from \"../core/auth.service\";\nimport * as i4 from \"../core/search.params\";\nimport * as i5 from \"../core/error.service\";\n/**\r\n * Api services for the `Question` model.\r\n */\nvar QuestionApi = /** @class */function (_super) {\n  __extends(QuestionApi, _super);\n  function QuestionApi(http, models, auth, searchParams, errorHandler) {\n    var _this = _super.call(this, http, models, auth, searchParams, errorHandler) || this;\n    _this.http = http;\n    _this.models = models;\n    _this.auth = auth;\n    _this.searchParams = searchParams;\n    _this.errorHandler = errorHandler;\n    return _this;\n  }\n  /**\r\n   * Find a related item by id for answers.\r\n   *\r\n   * @param {any} id question id\r\n   *\r\n   * @param {any} fk Foreign key for answers\r\n   *\r\n   * @returns {object} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `Question` object.)\r\n   * </em>\r\n   */\n  QuestionApi.prototype.findByIdAnswers = function (id, fk, customHeaders) {\n    var _method = \"GET\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/questions/:id/answers/:fk\";\n    var _routeParams = {\n      id: id,\n      fk: fk\n    };\n    var _postBody = {};\n    var _urlParams = {};\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Delete a related item by id for answers.\r\n   *\r\n   * @param {any} id question id\r\n   *\r\n   * @param {any} fk Foreign key for answers\r\n   *\r\n   * @returns {object} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\n  QuestionApi.prototype.destroyByIdAnswers = function (id, fk, customHeaders) {\n    var _method = \"DELETE\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/questions/:id/answers/:fk\";\n    var _routeParams = {\n      id: id,\n      fk: fk\n    };\n    var _postBody = {};\n    var _urlParams = {};\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Update a related item by id for answers.\r\n   *\r\n   * @param {any} id question id\r\n   *\r\n   * @param {any} fk Foreign key for answers\r\n   *\r\n   * @param {object} data Request data.\r\n   *\r\n   * This method expects a subset of model properties as request parameters.\r\n   *\r\n   * @returns {object} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `Question` object.)\r\n   * </em>\r\n   */\n  QuestionApi.prototype.updateByIdAnswers = function (id, fk, data, customHeaders) {\n    if (data === void 0) {\n      data = {};\n    }\n    var _method = \"PUT\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/questions/:id/answers/:fk\";\n    var _routeParams = {\n      id: id,\n      fk: fk\n    };\n    var _postBody = {\n      data: data\n    };\n    var _urlParams = {};\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Queries answers of question.\r\n   *\r\n   * @param {any} id question id\r\n   *\r\n   * @param {object} filter\r\n   *\r\n   * @returns {object[]} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `Question` object.)\r\n   * </em>\r\n   */\n  QuestionApi.prototype.getAnswers = function (id, filter, customHeaders) {\n    if (filter === void 0) {\n      filter = {};\n    }\n    var _method = \"GET\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/questions/:id/answers\";\n    var _routeParams = {\n      id: id\n    };\n    var _postBody = {};\n    var _urlParams = {};\n    if (typeof filter !== 'undefined' && filter !== null) _urlParams.filter = filter;\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Creates a new instance in answers of this model.\r\n   *\r\n   * @param {any} id question id\r\n   *\r\n   * @param {object} data Request data.\r\n   *\r\n   * This method expects a subset of model properties as request parameters.\r\n   *\r\n   * @returns {object} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `Question` object.)\r\n   * </em>\r\n   */\n  QuestionApi.prototype.createAnswers = function (id, data, customHeaders) {\n    if (data === void 0) {\n      data = {};\n    }\n    var _method = \"POST\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/questions/:id/answers\";\n    var _routeParams = {\n      id: id\n    };\n    var _postBody = {\n      data: data\n    };\n    var _urlParams = {};\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Deletes all answers of this model.\r\n   *\r\n   * @param {any} id question id\r\n   *\r\n   * @returns {object} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\n  QuestionApi.prototype.deleteAnswers = function (id, customHeaders) {\n    var _method = \"DELETE\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/questions/:id/answers\";\n    var _routeParams = {\n      id: id\n    };\n    var _postBody = {};\n    var _urlParams = {};\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Counts answers of question.\r\n   *\r\n   * @param {any} id question id\r\n   *\r\n   * @param {object} where Criteria to match model instances\r\n   *\r\n   * @returns {object} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * Data properties:\r\n   *\r\n   *  - `count` – `{number}` -\r\n   */\n  QuestionApi.prototype.countAnswers = function (id, where, customHeaders) {\n    if (where === void 0) {\n      where = {};\n    }\n    var _method = \"GET\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/questions/:id/answers/count\";\n    var _routeParams = {\n      id: id\n    };\n    var _postBody = {};\n    var _urlParams = {};\n    if (typeof where !== 'undefined' && where !== null) _urlParams.where = where;\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Patch an existing model instance or insert a new one into the data source.\r\n   *\r\n   * @param {object} data Request data.\r\n   *\r\n   *  - `data` – `{object}` - Model instance data\r\n   *\r\n   * @returns {object} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `Question` object.)\r\n   * </em>\r\n   */\n  QuestionApi.prototype.patchOrCreate = function (data, customHeaders) {\n    if (data === void 0) {\n      data = {};\n    }\n    var _method = \"PATCH\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/questions\";\n    var _routeParams = {};\n    var _postBody = {\n      data: data\n    };\n    var _urlParams = {};\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Patch attributes for a model instance and persist it into the data source.\r\n   *\r\n   * @param {any} id question id\r\n   *\r\n   * @param {object} data Request data.\r\n   *\r\n   *  - `data` – `{object}` - An object of model property name/value pairs\r\n   *\r\n   * @returns {object} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `Question` object.)\r\n   * </em>\r\n   */\n  QuestionApi.prototype.patchAttributes = function (id, data, customHeaders) {\n    if (data === void 0) {\n      data = {};\n    }\n    var _method = \"PATCH\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/questions/:id\";\n    var _routeParams = {\n      id: id\n    };\n    var _postBody = {\n      data: data\n    };\n    var _urlParams = {};\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * Creates a new instance in answers of this model.\r\n   *\r\n   * @param {any} id question id\r\n   *\r\n   * @param {object} data Request data.\r\n   *\r\n   * This method expects a subset of model properties as request parameters.\r\n   *\r\n   * @returns {object[]} An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `Question` object.)\r\n   * </em>\r\n   */\n  QuestionApi.prototype.createManyAnswers = function (id, data, customHeaders) {\n    if (data === void 0) {\n      data = [];\n    }\n    var _method = \"POST\";\n    var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/questions/:id/answers\";\n    var _routeParams = {\n      id: id\n    };\n    var _postBody = {\n      data: data\n    };\n    var _urlParams = {};\n    var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n    return result;\n  };\n  /**\r\n   * The name of the model represented by this $resource,\r\n   * i.e. `Question`.\r\n   */\n  QuestionApi.prototype.getModelName = function () {\n    return \"Question\";\n  };\n  QuestionApi.ɵfac = function QuestionApi_Factory(t) {\n    return new (t || QuestionApi)(i0.ɵɵinject(Http), i0.ɵɵinject(SDKModels), i0.ɵɵinject(LoopBackAuth), i0.ɵɵinject(JSONSearchParams), i0.ɵɵinject(ErrorHandler, 8));\n  };\n  QuestionApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuestionApi,\n    factory: QuestionApi.ɵfac\n  });\n  return QuestionApi;\n}(BaseLoopBackApi);\nexport { QuestionApi };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}