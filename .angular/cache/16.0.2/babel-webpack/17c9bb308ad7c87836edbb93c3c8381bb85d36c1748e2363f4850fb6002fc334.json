{"ast":null,"code":"import _defineProperty from \"C:/Users/john.latulippe/lafs-web/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport * as i0 from \"@angular/core\";\n/**\r\n* @author Jonathan Casarrubias <twitter:@johncasarrubias> <github:@mean-expert-official>\r\n* @module CookieBrowser\r\n* @license MIT\r\n* @description\r\n* This module handle cookies, it will be provided using DI Swapping according the\r\n* SDK Socket Driver Available currently supporting Angular 2 for web and NativeScript 2.\r\n**/\nexport let CookieBrowser = /*#__PURE__*/(() => {\n  class CookieBrowser {\n    constructor() {\n      /**\r\n       * @type {CookieInterface}\r\n       **/\n      _defineProperty(this, \"cookies\", {});\n    }\n    /**\r\n     * @method get\r\n     * @param {string} key Cookie key name\r\n     * @return {any}\r\n     * @description\r\n     * The getter will return any type of data persisted in cookies.\r\n     **/\n    get(key) {\n      if (!this.cookies[key]) {\n        let cookie = window.document.cookie.split('; ').filter(item => item.split('=')[0] === key).pop();\n        if (!cookie) {\n          return null;\n        }\n        this.cookies[key] = this.parse(cookie.split('=').slice(1).join('='));\n      }\n      return this.cookies[key];\n    }\n    /**\r\n     * @method set\r\n     * @param {string} key Cookie key name\r\n     * @param {any} value Any value\r\n     * @param {Date=} expires The date of expiration (Optional)\r\n     * @return {void}\r\n     * @description\r\n     * The setter will return any type of data persisted in cookies.\r\n     **/\n    set(key, value, expires) {\n      this.cookies[key] = value;\n      let cookie = `${key}=${value}; path=/${expires ? `; expires=${expires.toUTCString()}` : ''}`;\n      window.document.cookie = cookie;\n    }\n    /**\r\n     * @method remove\r\n     * @param {string} key Cookie key name\r\n     * @return {void}\r\n     * @description\r\n     * This method will remove a cookie from the client.\r\n     **/\n    remove(key) {\n      document.cookie = key + '=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n      delete this.cookies[key];\n    }\n    /**\r\n     * @method parse\r\n     * @param {any} value Input data expected to be JSON\r\n     * @return {void}\r\n     * @description\r\n     * This method will parse the string as JSON if possible, otherwise will\r\n     * return the value itself.\r\n     **/\n    parse(value) {\n      try {\n        return JSON.parse(value);\n      } catch (e) {\n        return value;\n      }\n    }\n  }\n  _defineProperty(CookieBrowser, \"\\u0275fac\", function CookieBrowser_Factory(t) {\n    return new (t || CookieBrowser)();\n  });\n  _defineProperty(CookieBrowser, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CookieBrowser,\n    factory: CookieBrowser.ɵfac\n  }));\n  return CookieBrowser;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}