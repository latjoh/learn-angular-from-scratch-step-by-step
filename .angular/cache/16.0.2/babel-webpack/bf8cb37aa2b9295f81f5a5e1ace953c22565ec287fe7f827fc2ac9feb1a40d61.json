{"ast":null,"code":"import _defineProperty from \"C:/Users/john.latulippe/lafs-web/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { InternalStorage } from '../../storage/storage.swaps';\nimport { SDKToken } from '../../models/BaseModels';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../storage/storage.swaps\";\n/**\r\n* @author Jonathan Casarrubias <twitter:@johncasarrubias> <github:@mean-expert-official>\r\n* @module SocketConnection\r\n* @license MIT\r\n* @description\r\n* This module handle socket connections and return singleton instances for each\r\n* connection, it will use the SDK Socket Driver Available currently supporting\r\n* Angular 2 for web, NativeScript 2 and Angular Universal.\r\n**/\nexport let LoopBackAuth = /*#__PURE__*/(() => {\n  class LoopBackAuth {\n    /**\r\n     * @method constructor\r\n     * @param {InternalStorage} storage Internal Storage Driver\r\n     * @description\r\n     * The constructor will initialize the token loading data from storage\r\n     **/\n    constructor(storage) {\n      _defineProperty(this, \"storage\", void 0);\n      /**\r\n       * @type {SDKToken}\r\n       **/\n      _defineProperty(this, \"token\", new SDKToken());\n      /**\r\n       * @type {string}\r\n       **/\n      _defineProperty(this, \"prefix\", '$LoopBackSDK$');\n      this.storage = storage;\n      this.token.id = this.load('id');\n      this.token.user = this.load('user');\n      this.token.userId = this.load('userId');\n      this.token.created = this.load('created');\n      this.token.ttl = this.load('ttl');\n      this.token.rememberMe = this.load('rememberMe');\n    }\n    /**\r\n     * @method setRememberMe\r\n     * @param {boolean} value Flag to remember credentials\r\n     * @return {void}\r\n     * @description\r\n     * This method will set a flag in order to remember the current credentials\r\n     **/\n    setRememberMe(value) {\n      this.token.rememberMe = value;\n    }\n    /**\r\n     * @method setUser\r\n     * @param {any} user Any type of user model\r\n     * @return {void}\r\n     * @description\r\n     * This method will update the user information and persist it if the\r\n     * rememberMe flag is set.\r\n     **/\n    setUser(user) {\n      this.token.user = user;\n      this.save();\n    }\n    /**\r\n     * @method setToken\r\n     * @param {SDKToken} token SDKToken or casted AccessToken instance\r\n     * @return {void}\r\n     * @description\r\n     * This method will set a flag in order to remember the current credentials\r\n     **/\n    setToken(token) {\n      this.token = Object.assign({}, this.token, token);\n      this.save();\n    }\n    /**\r\n     * @method getToken\r\n     * @return {void}\r\n     * @description\r\n     * This method will set a flag in order to remember the current credentials.\r\n     **/\n    getToken() {\n      return this.token;\n    }\n    /**\r\n     * @method getAccessTokenId\r\n     * @return {string}\r\n     * @description\r\n     * This method will return the actual token string, not the object instance.\r\n     **/\n    getAccessTokenId() {\n      return this.token.id;\n    }\n    /**\r\n     * @method getCurrentUserId\r\n     * @return {any}\r\n     * @description\r\n     * This method will return the current user id, it can be number or string.\r\n     **/\n    getCurrentUserId() {\n      return this.token.userId;\n    }\n    /**\r\n     * @method getCurrentUserData\r\n     * @return {any}\r\n     * @description\r\n     * This method will return the current user instance.\r\n     **/\n    getCurrentUserData() {\n      return typeof this.token.user === 'string' ? JSON.parse(this.token.user) : this.token.user;\n    }\n    /**\r\n     * @method save\r\n     * @return {boolean} Whether or not the information was saved\r\n     * @description\r\n     * This method will save in either local storage or cookies the current credentials.\r\n     * But only if rememberMe is enabled.\r\n     **/\n    save() {\n      let today = new Date();\n      let expires = new Date(today.getTime() + this.token.ttl * 1000);\n      this.persist('id', this.token.id, expires);\n      this.persist('user', this.token.user, expires);\n      this.persist('userId', this.token.userId, expires);\n      this.persist('created', this.token.created, expires);\n      this.persist('ttl', this.token.ttl, expires);\n      this.persist('rememberMe', this.token.rememberMe, expires);\n      return true;\n    }\n    /**\r\n     * @method load\r\n     * @param {string} prop Property name\r\n     * @return {any} Any information persisted in storage\r\n     * @description\r\n     * This method will load either from local storage or cookies the provided property.\r\n     **/\n    load(prop) {\n      return this.storage.get(`${this.prefix}${prop}`);\n    }\n    /**\r\n     * @method clear\r\n     * @return {void}\r\n     * @description\r\n     * This method will clear cookies or the local storage.\r\n     **/\n    clear() {\n      Object.keys(this.token).forEach(prop => this.storage.remove(`${this.prefix}${prop}`));\n      this.token = new SDKToken();\n    }\n    /**\r\n     * @method persist\r\n     * @return {void}\r\n     * @description\r\n     * This method saves values to storage\r\n     **/\n    persist(prop, value, expires) {\n      try {\n        this.storage.set(`${this.prefix}${prop}`, typeof value === 'object' ? JSON.stringify(value) : value, this.token.rememberMe ? expires : null);\n      } catch (err) {\n        console.error('Cannot access local/session storage:', err);\n      }\n    }\n  }\n  _defineProperty(LoopBackAuth, \"\\u0275fac\", function LoopBackAuth_Factory(t) {\n    return new (t || LoopBackAuth)(i0.ɵɵinject(InternalStorage));\n  });\n  _defineProperty(LoopBackAuth, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoopBackAuth,\n    factory: LoopBackAuth.ɵfac\n  }));\n  return LoopBackAuth;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}