{"ast":null,"code":"import _defineProperty from \"C:/Users/john.latulippe/lafs-web/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Http } from '@angular/http';\nimport { SDKModels } from './SDKModels';\nimport { BaseLoopBackApi } from '../core/base.service';\nimport { LoopBackConfig } from '../../lb.config';\nimport { LoopBackAuth } from '../core/auth.service';\nimport { JSONSearchParams } from '../core/search.params';\nimport { ErrorHandler } from '../core/error.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/http\";\nimport * as i2 from \"./SDKModels\";\nimport * as i3 from \"../core/auth.service\";\nimport * as i4 from \"../core/search.params\";\nimport * as i5 from \"../core/error.service\";\n/**\r\n * Api services for the `Question` model.\r\n */\nexport let QuestionApi = /*#__PURE__*/(() => {\n  class QuestionApi extends BaseLoopBackApi {\n    constructor(http, models, auth, searchParams, errorHandler) {\n      super(http, models, auth, searchParams, errorHandler);\n      _defineProperty(this, \"http\", void 0);\n      _defineProperty(this, \"models\", void 0);\n      _defineProperty(this, \"auth\", void 0);\n      _defineProperty(this, \"searchParams\", void 0);\n      _defineProperty(this, \"errorHandler\", void 0);\n      this.http = http;\n      this.models = models;\n      this.auth = auth;\n      this.searchParams = searchParams;\n      this.errorHandler = errorHandler;\n    }\n    /**\r\n     * Find a related item by id for answers.\r\n     *\r\n     * @param {any} id question id\r\n     *\r\n     * @param {any} fk Foreign key for answers\r\n     *\r\n     * @returns {object} An empty reference that will be\r\n     *   populated with the actual data once the response is returned\r\n     *   from the server.\r\n     *\r\n     * <em>\r\n     * (The remote method definition does not provide any description.\r\n     * This usually means the response is a `Question` object.)\r\n     * </em>\r\n     */\n    findByIdAnswers(id, fk, customHeaders) {\n      let _method = \"GET\";\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/questions/:id/answers/:fk\";\n      let _routeParams = {\n        id: id,\n        fk: fk\n      };\n      let _postBody = {};\n      let _urlParams = {};\n      let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n      return result;\n    }\n    /**\r\n     * Delete a related item by id for answers.\r\n     *\r\n     * @param {any} id question id\r\n     *\r\n     * @param {any} fk Foreign key for answers\r\n     *\r\n     * @returns {object} An empty reference that will be\r\n     *   populated with the actual data once the response is returned\r\n     *   from the server.\r\n     *\r\n     * This method returns no data.\r\n     */\n    destroyByIdAnswers(id, fk, customHeaders) {\n      let _method = \"DELETE\";\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/questions/:id/answers/:fk\";\n      let _routeParams = {\n        id: id,\n        fk: fk\n      };\n      let _postBody = {};\n      let _urlParams = {};\n      let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n      return result;\n    }\n    /**\r\n     * Update a related item by id for answers.\r\n     *\r\n     * @param {any} id question id\r\n     *\r\n     * @param {any} fk Foreign key for answers\r\n     *\r\n     * @param {object} data Request data.\r\n     *\r\n     * This method expects a subset of model properties as request parameters.\r\n     *\r\n     * @returns {object} An empty reference that will be\r\n     *   populated with the actual data once the response is returned\r\n     *   from the server.\r\n     *\r\n     * <em>\r\n     * (The remote method definition does not provide any description.\r\n     * This usually means the response is a `Question` object.)\r\n     * </em>\r\n     */\n    updateByIdAnswers(id, fk, data = {}, customHeaders) {\n      let _method = \"PUT\";\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/questions/:id/answers/:fk\";\n      let _routeParams = {\n        id: id,\n        fk: fk\n      };\n      let _postBody = {\n        data: data\n      };\n      let _urlParams = {};\n      let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n      return result;\n    }\n    /**\r\n     * Queries answers of question.\r\n     *\r\n     * @param {any} id question id\r\n     *\r\n     * @param {object} filter\r\n     *\r\n     * @returns {object[]} An empty reference that will be\r\n     *   populated with the actual data once the response is returned\r\n     *   from the server.\r\n     *\r\n     * <em>\r\n     * (The remote method definition does not provide any description.\r\n     * This usually means the response is a `Question` object.)\r\n     * </em>\r\n     */\n    getAnswers(id, filter = {}, customHeaders) {\n      let _method = \"GET\";\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/questions/:id/answers\";\n      let _routeParams = {\n        id: id\n      };\n      let _postBody = {};\n      let _urlParams = {};\n      if (typeof filter !== 'undefined' && filter !== null) _urlParams.filter = filter;\n      let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n      return result;\n    }\n    /**\r\n     * Creates a new instance in answers of this model.\r\n     *\r\n     * @param {any} id question id\r\n     *\r\n     * @param {object} data Request data.\r\n     *\r\n     * This method expects a subset of model properties as request parameters.\r\n     *\r\n     * @returns {object} An empty reference that will be\r\n     *   populated with the actual data once the response is returned\r\n     *   from the server.\r\n     *\r\n     * <em>\r\n     * (The remote method definition does not provide any description.\r\n     * This usually means the response is a `Question` object.)\r\n     * </em>\r\n     */\n    createAnswers(id, data = {}, customHeaders) {\n      let _method = \"POST\";\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/questions/:id/answers\";\n      let _routeParams = {\n        id: id\n      };\n      let _postBody = {\n        data: data\n      };\n      let _urlParams = {};\n      let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n      return result;\n    }\n    /**\r\n     * Deletes all answers of this model.\r\n     *\r\n     * @param {any} id question id\r\n     *\r\n     * @returns {object} An empty reference that will be\r\n     *   populated with the actual data once the response is returned\r\n     *   from the server.\r\n     *\r\n     * This method returns no data.\r\n     */\n    deleteAnswers(id, customHeaders) {\n      let _method = \"DELETE\";\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/questions/:id/answers\";\n      let _routeParams = {\n        id: id\n      };\n      let _postBody = {};\n      let _urlParams = {};\n      let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n      return result;\n    }\n    /**\r\n     * Counts answers of question.\r\n     *\r\n     * @param {any} id question id\r\n     *\r\n     * @param {object} where Criteria to match model instances\r\n     *\r\n     * @returns {object} An empty reference that will be\r\n     *   populated with the actual data once the response is returned\r\n     *   from the server.\r\n     *\r\n     * Data properties:\r\n     *\r\n     *  - `count` – `{number}` -\r\n     */\n    countAnswers(id, where = {}, customHeaders) {\n      let _method = \"GET\";\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/questions/:id/answers/count\";\n      let _routeParams = {\n        id: id\n      };\n      let _postBody = {};\n      let _urlParams = {};\n      if (typeof where !== 'undefined' && where !== null) _urlParams.where = where;\n      let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n      return result;\n    }\n    /**\r\n     * Patch an existing model instance or insert a new one into the data source.\r\n     *\r\n     * @param {object} data Request data.\r\n     *\r\n     *  - `data` – `{object}` - Model instance data\r\n     *\r\n     * @returns {object} An empty reference that will be\r\n     *   populated with the actual data once the response is returned\r\n     *   from the server.\r\n     *\r\n     * <em>\r\n     * (The remote method definition does not provide any description.\r\n     * This usually means the response is a `Question` object.)\r\n     * </em>\r\n     */\n    patchOrCreate(data = {}, customHeaders) {\n      let _method = \"PATCH\";\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/questions\";\n      let _routeParams = {};\n      let _postBody = {\n        data: data\n      };\n      let _urlParams = {};\n      let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n      return result;\n    }\n    /**\r\n     * Patch attributes for a model instance and persist it into the data source.\r\n     *\r\n     * @param {any} id question id\r\n     *\r\n     * @param {object} data Request data.\r\n     *\r\n     *  - `data` – `{object}` - An object of model property name/value pairs\r\n     *\r\n     * @returns {object} An empty reference that will be\r\n     *   populated with the actual data once the response is returned\r\n     *   from the server.\r\n     *\r\n     * <em>\r\n     * (The remote method definition does not provide any description.\r\n     * This usually means the response is a `Question` object.)\r\n     * </em>\r\n     */\n    patchAttributes(id, data = {}, customHeaders) {\n      let _method = \"PATCH\";\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/questions/:id\";\n      let _routeParams = {\n        id: id\n      };\n      let _postBody = {\n        data: data\n      };\n      let _urlParams = {};\n      let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n      return result;\n    }\n    /**\r\n     * Creates a new instance in answers of this model.\r\n     *\r\n     * @param {any} id question id\r\n     *\r\n     * @param {object} data Request data.\r\n     *\r\n     * This method expects a subset of model properties as request parameters.\r\n     *\r\n     * @returns {object[]} An empty reference that will be\r\n     *   populated with the actual data once the response is returned\r\n     *   from the server.\r\n     *\r\n     * <em>\r\n     * (The remote method definition does not provide any description.\r\n     * This usually means the response is a `Question` object.)\r\n     * </em>\r\n     */\n    createManyAnswers(id, data = [], customHeaders) {\n      let _method = \"POST\";\n      let _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/questions/:id/answers\";\n      let _routeParams = {\n        id: id\n      };\n      let _postBody = {\n        data: data\n      };\n      let _urlParams = {};\n      let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n      return result;\n    }\n    /**\r\n     * The name of the model represented by this $resource,\r\n     * i.e. `Question`.\r\n     */\n    getModelName() {\n      return \"Question\";\n    }\n  }\n  _defineProperty(QuestionApi, \"\\u0275fac\", function QuestionApi_Factory(t) {\n    return new (t || QuestionApi)(i0.ɵɵinject(Http), i0.ɵɵinject(SDKModels), i0.ɵɵinject(LoopBackAuth), i0.ɵɵinject(JSONSearchParams), i0.ɵɵinject(ErrorHandler, 8));\n  });\n  _defineProperty(QuestionApi, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuestionApi,\n    factory: QuestionApi.ɵfac\n  }));\n  return QuestionApi;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}