{"ast":null,"code":"import _defineProperty from \"C:/Users/john.latulippe/lafs-web/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Http, Headers, Request, RequestOptions } from '@angular/http';\nimport { JSONSearchParams } from './search.params';\nimport { ErrorHandler } from './error.service';\nimport { LoopBackAuth } from './auth.service';\nimport { LoopBackConfig } from '../../lb.config';\nimport { LoopBackFilter } from '../../models/BaseModels';\nimport { SDKModels } from '../custom/SDKModels';\nimport { Subject } from 'rxjs/Subject';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/map';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/http\";\nimport * as i2 from \"../custom/SDKModels\";\nimport * as i3 from \"./auth.service\";\nimport * as i4 from \"./search.params\";\nimport * as i5 from \"./error.service\";\n/**\r\n* @module BaseLoopBackApi\r\n* @author Jonathan Casarrubias <@johncasarrubias> <github:jonathan-casarrubias>\r\n* @author Nikolay Matiushenkov <https://github.com/mnvx>\r\n* @license MIT\r\n* @description\r\n* Abstract class that will be implemented in every custom service automatically built\r\n* by the sdk builder.\r\n* It provides the core functionallity for every API call, either by HTTP Calls or by\r\n* WebSockets.\r\n**/\nexport let BaseLoopBackApi = /*#__PURE__*/(() => {\n  class BaseLoopBackApi {\n    constructor(http, models, auth, searchParams, errorHandler) {\n      _defineProperty(this, \"http\", void 0);\n      _defineProperty(this, \"models\", void 0);\n      _defineProperty(this, \"auth\", void 0);\n      _defineProperty(this, \"searchParams\", void 0);\n      _defineProperty(this, \"errorHandler\", void 0);\n      _defineProperty(this, \"path\", void 0);\n      _defineProperty(this, \"model\", void 0);\n      this.http = http;\n      this.models = models;\n      this.auth = auth;\n      this.searchParams = searchParams;\n      this.errorHandler = errorHandler;\n      this.model = this.models.get(this.getModelName());\n    }\n    /**\r\n     * @method request\r\n     * @param {string}  method      Request method (GET, POST, PUT)\r\n     * @param {string}  url         Request url (my-host/my-url/:id)\r\n     * @param {any}     routeParams Values of url parameters\r\n     * @param {any}     urlParams   Parameters for building url (filter and other)\r\n     * @param {any}     postBody    Request postBody\r\n     * @return {Observable<any>}\r\n     * @description\r\n     * This is a core method, every HTTP Call will be done from here, every API Service will\r\n     * extend this class and use this method to get RESTful communication.\r\n     **/\n    request(method, url, routeParams = {}, urlParams = {}, postBody = {}, pubsub = false, customHeaders) {\n      // Transpile route variables to the actual request Values\n      Object.keys(routeParams).forEach(key => {\n        url = url.replace(new RegExp(\":\" + key + \"(\\/|$)\", \"g\"), routeParams[key] + \"$1\");\n      });\n      if (pubsub) {\n        console.info('SDK: PubSub functionality is disabled, generate SDK using -io enabled');\n      } else {\n        // Headers to be sent\n        let headers = new Headers();\n        headers.append('Content-Type', 'application/json');\n        // Authenticate request\n        this.authenticate(url, headers);\n        // Body fix for built in remote methods using \"data\", \"options\" or \"credentials\n        // that are the actual body, Custom remote method properties are different and need\n        // to be wrapped into a body object\n        let body;\n        let postBodyKeys = typeof postBody === 'object' ? Object.keys(postBody) : [];\n        if (postBodyKeys.length === 1) {\n          body = postBody[postBodyKeys.shift()];\n        } else {\n          body = postBody;\n        }\n        let filter = '';\n        // Separate filter object from url params and add to search query\n        if (urlParams.filter) {\n          if (LoopBackConfig.isHeadersFilteringSet()) {\n            headers.append('filter', JSON.stringify(urlParams.filter));\n          } else {\n            filter = `?filter=${encodeURIComponent(JSON.stringify(urlParams.filter))}`;\n          }\n          delete urlParams.filter;\n        }\n        // Separate where object from url params and add to search query\n        /**\r\n        CODE BELOW WILL GENERATE THE FOLLOWING ISSUES:\r\n        - https://github.com/mean-expert-official/loopback-sdk-builder/issues/356\r\n        - https://github.com/mean-expert-official/loopback-sdk-builder/issues/328\r\n        if (urlParams.where) {\r\n          headers.append('where', JSON.stringify(urlParams.where));\r\n          delete urlParams.where;\r\n        }\r\n        **/\n        if (typeof customHeaders === 'function') {\n          headers = customHeaders(headers);\n        }\n        this.searchParams.setJSON(urlParams);\n        let request = new Request(new RequestOptions({\n          headers: headers,\n          method: method,\n          url: `${url}${filter}`,\n          search: Object.keys(urlParams).length > 0 ? this.searchParams.getURLSearchParams() : null,\n          body: body ? JSON.stringify(body) : undefined,\n          withCredentials: LoopBackConfig.getRequestOptionsCredentials()\n        }));\n        return this.http.request(request).map(res => res.text() != \"\" ? res.json() : {}).catch(e => this.errorHandler.handleError(e));\n      }\n    }\n    /**\r\n     * @method authenticate\r\n     * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n     * @license MIT\r\n     * @param {string} url Server URL\r\n     * @param {Headers} headers HTTP Headers\r\n     * @return {void}\r\n     * @description\r\n     * This method will try to authenticate using either an access_token or basic http auth\r\n     */\n    authenticate(url, headers) {\n      if (this.auth.getAccessTokenId()) {\n        headers.append('Authorization', LoopBackConfig.getAuthPrefix() + this.auth.getAccessTokenId());\n      }\n    }\n    /**\r\n     * @method create\r\n     * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n     * @license MIT\r\n     * @param {T} data Generic data type\r\n     * @return {Observable<T>}\r\n     * @description\r\n     * Generic create method\r\n     */\n    create(data, customHeaders) {\n      return this.request('POST', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path].join('/'), undefined, undefined, {\n        data\n      }, null, customHeaders).map(data => this.model.factory(data));\n    }\n    /**\r\n     * @method createMany\r\n     * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n     * @license MIT\r\n     * @param {T[]} data Generic data type array\r\n     * @return {Observable<T[]>}\r\n     * @description\r\n     * Generic create many method\r\n     */\n    createMany(data, customHeaders) {\n      return this.request('POST', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path].join('/'), undefined, undefined, {\n        data\n      }, null, customHeaders).map(datum => datum.map(data => this.model.factory(data)));\n    }\n    /**\r\n     * @method findById\r\n     * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n     * @license MIT\r\n     * @param {any} data Generic data type\r\n     * @return {Observable<T>}\r\n     * @description\r\n     * Generic findById method\r\n     */\n    findById(id, filter = {}, customHeaders) {\n      let _urlParams = {};\n      if (filter) _urlParams.filter = filter;\n      return this.request('GET', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, ':id'].join('/'), {\n        id\n      }, _urlParams, undefined, null, customHeaders).map(data => this.model.factory(data));\n    }\n    /**\r\n     * @method find\r\n     * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n     * @license MIT\r\n     * @return {Observable<T[+>}\r\n     * @description\r\n     * Generic find method\r\n     */\n    find(filter = {}, customHeaders) {\n      return this.request('GET', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path].join('/'), undefined, {\n        filter\n      }, undefined, null, customHeaders).map(datum => datum.map(data => this.model.factory(data)));\n    }\n    /**\r\n     * @method exists\r\n     * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n     * @license MIT\r\n     * @return {Observable<T[]>}\r\n     * @description\r\n     * Generic exists method\r\n     */\n    exists(id, customHeaders) {\n      return this.request('GET', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, ':id/exists'].join('/'), {\n        id\n      }, undefined, undefined, null, customHeaders);\n    }\n    /**\r\n     * @method findOne\r\n     * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n     * @license MIT\r\n     * @return {Observable<T>}\r\n     * @description\r\n     * Generic findOne method\r\n     */\n    findOne(filter = {}, customHeaders) {\n      return this.request('GET', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, 'findOne'].join('/'), undefined, {\n        filter\n      }, undefined, null, customHeaders).map(data => this.model.factory(data));\n    }\n    /**\r\n     * @method updateAll\r\n     * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n     * @license MIT\r\n     * @return {Observable<T[]>}\r\n     * @description\r\n     * Generic updateAll method\r\n     */\n    updateAll(where = {}, data, customHeaders) {\n      let _urlParams = {};\n      if (where) _urlParams.where = where;\n      return this.request('POST', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, 'update'].join('/'), undefined, _urlParams, {\n        data\n      }, null, customHeaders);\n    }\n    /**\r\n     * @method deleteById\r\n     * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n     * @license MIT\r\n     * @return {Observable<T>}\r\n     * @description\r\n     * Generic deleteById method\r\n     */\n    deleteById(id, customHeaders) {\n      return this.request('DELETE', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, ':id'].join('/'), {\n        id\n      }, undefined, undefined, null, customHeaders).map(data => this.model.factory(data));\n    }\n    /**\r\n     * @method count\r\n     * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n     * @license MIT\r\n     * @return {Observable<{ count: number }>}\r\n     * @description\r\n     * Generic count method\r\n     */\n    count(where = {}, customHeaders) {\n      let _urlParams = {};\n      if (where) _urlParams.where = where;\n      return this.request('GET', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, 'count'].join('/'), undefined, _urlParams, undefined, null, customHeaders);\n    }\n    /**\r\n     * @method updateAttributes\r\n     * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n     * @license MIT\r\n     * @return {Observable<T>}\r\n     * @description\r\n     * Generic updateAttributes method\r\n     */\n    updateAttributes(id, data, customHeaders) {\n      return this.request('PUT', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, ':id'].join('/'), {\n        id\n      }, undefined, {\n        data\n      }, null, customHeaders).map(data => this.model.factory(data));\n    }\n    /**\r\n     * @method upsert\r\n     * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n     * @license MIT\r\n     * @return {Observable<T>}\r\n     * @description\r\n     * Generic upsert method\r\n     */\n    upsert(data = {}, customHeaders) {\n      return this.request('PUT', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path].join('/'), undefined, undefined, {\n        data\n      }, null, customHeaders).map(data => this.model.factory(data));\n    }\n    /**\r\n     * @method upsertPatch\r\n     * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n     * @license MIT\r\n     * @return {Observable<T>}\r\n     * @description\r\n     * Generic upsert method using patch http method\r\n     */\n    upsertPatch(data = {}, customHeaders) {\n      return this.request('PATCH', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path].join('/'), undefined, undefined, {\n        data\n      }, null, customHeaders).map(data => this.model.factory(data));\n    }\n    /**\r\n     * @method upsertWithWhere\r\n     * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n     * @license MIT\r\n     * @return {Observable<T>}\r\n     * @description\r\n     * Generic upsertWithWhere method\r\n     */\n    upsertWithWhere(where = {}, data = {}, customHeaders) {\n      let _urlParams = {};\n      if (where) _urlParams.where = where;\n      return this.request('POST', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, 'upsertWithWhere'].join('/'), undefined, _urlParams, {\n        data\n      }, null, customHeaders).map(data => this.model.factory(data));\n    }\n    /**\r\n     * @method replaceOrCreate\r\n     * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n     * @license MIT\r\n     * @return {Observable<T>}\r\n     * @description\r\n     * Generic replaceOrCreate method\r\n     */\n    replaceOrCreate(data = {}, customHeaders) {\n      return this.request('POST', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, 'replaceOrCreate'].join('/'), undefined, undefined, {\n        data\n      }, null, customHeaders).map(data => this.model.factory(data));\n    }\n    /**\r\n     * @method replaceById\r\n     * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n     * @license MIT\r\n     * @return {Observable<T>}\r\n     * @description\r\n     * Generic replaceById method\r\n     */\n    replaceById(id, data = {}, customHeaders) {\n      return this.request('POST', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, ':id', 'replace'].join('/'), {\n        id\n      }, undefined, {\n        data\n      }, null, customHeaders).map(data => this.model.factory(data));\n    }\n    /**\r\n     * @method createChangeStream\r\n     * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n     * @license MIT\r\n     * @return {Observable<any>}\r\n     * @description\r\n     * Generic createChangeStream method\r\n     */\n    createChangeStream() {\n      let subject = new Subject();\n      if (typeof EventSource !== 'undefined') {\n        let emit = msg => subject.next(JSON.parse(msg.data));\n        var source = new EventSource([LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, 'change-stream'].join('/'));\n        source.addEventListener('data', emit);\n        source.onerror = emit;\n      } else {\n        console.warn('SDK Builder: EventSource is not supported');\n      }\n      return subject.asObservable();\n    }\n  }\n  _defineProperty(BaseLoopBackApi, \"\\u0275fac\", function BaseLoopBackApi_Factory(t) {\n    return new (t || BaseLoopBackApi)(i0.ɵɵinject(Http), i0.ɵɵinject(SDKModels), i0.ɵɵinject(LoopBackAuth), i0.ɵɵinject(JSONSearchParams), i0.ɵɵinject(ErrorHandler, 8));\n  });\n  _defineProperty(BaseLoopBackApi, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BaseLoopBackApi,\n    factory: BaseLoopBackApi.ɵfac\n  }));\n  return BaseLoopBackApi;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}